1. 页面跳转 

  Navigator.of(context).pushNamed("new_page", arguments: "hi");
  
2. 接收页面传递过来的参数

  var args=ModalRoute.of(context).settings.arguments
  
3. 注册路由表
  
  在APP对象中条件Route属性
  
  return new MaterialApp(
    title: 'Flutter Demo',
    theme: new ThemeData(
      primarySwatch: Colors.blue,
    ),
    //注册路由表
    routes:{
     "new_page":(context)=>NewRoute(),
    } ,
    home: new MyHomePage(title: 'Flutter Demo Home Page'),
  );
  
  
  4. 添加资源文件
  
      4.1 在pubspec.yaml 文件中assets:节点下添加资源
      4.2 资源路径为相对于pubspec.yaml文件的路径
      4.3 在build的过程中，会在asset文件相邻的文件夹内查找文件名相同的文件。方便在系统中切换不同的资源文件
      
      …/pubspec.yaml
      …/graphics/my_icon.png
      …/graphics/background.png
      …/graphics/dark/background.png
      …etc.
    
      然后pubspec.yaml文件中只需包含:
      
      flutter:
        assets:
          - graphics/background.png
     
       4.4 声明图片资源
        
        …/my_icon.png
        …/2.0x/my_icon.png
        …/3.0x/my_icon.png
        
        自动会根据设备的像素比率选择合适的图片
     
  5. 加载资源
  
    5.1 使用rootBundle.loadString("assets/config.json"); // 使用默认的 Asset Bundle
    
    5.2 使用DefaultAssetBundle.loadString("assets/config.json");// 使用父级组件使用的Asset Bundle，推荐使用
    
    5.3 使用图片资源 image: new AssetImage('graphics/background.png') 或者 Image.asset('graphics/background.png')
    
    5.4 使用依赖包中的图片资源 
      
      new AssetImage('icons/heart.png', package: 'my_icons')
      new Image.asset('icons/heart.png', package: 'my_icons')    
    
    
  6.  线程及异常处理
  
      6.1 Flutter 是单线程处理模型，内容包含 微服务循环 和 事件循环
      
      6.2 Flutter 的微服务循环 优先于 事件循环，处理完微服务循环中的内容 才会 处理事件循环中的内容
      
      6.3 全局异常捕获，在main()方法中将Flutter.onError设置为 自定义的异常处理函数即可。
        
          FlutterError.onError = (FlutterErrorDetails details) {
            reportError(details);
          };
       
      6.4 Flutter 中的 try... catch ... 只能捕获同步的异常，不能捕获到异步的异常
      
      6.5 异步异常捕获方式
        1). 在Future.catchError()方法中进行捕获
        2). 使用async...await的方式执行异步方法，通过try... catch捕获异常
        3). 使用runzone方法，通过定义执行环境捕获异常.在zoneSpecification中可以定义拦截器，拦截执行环境中的方法
         main() 
         {
            runZoned(() => runApp(MyApp()), 
            zoneSpecification: new ZoneSpecification(
                print: (Zone self, ZoneDelegate parent, Zone zone, String line) {
                  parent.print(zone, "Intercepted: $line");
                }),
            onError: (Object obj, StackTrace stack) {
                    var details=makeDetails(obj,stack);
                    reportError(details);
                }
            );
         }
         
         完整的异常处理示例：
         
         void main() {
          FlutterError.onError = (FlutterErrorDetails details) {
            reportErrorAndLog(details);
          };
          runZoned(
            () => runApp(MyApp()),
            zoneSpecification: ZoneSpecification(
              print: (Zone self, ZoneDelegate parent, Zone zone, String line) {
                collectLog(line); // 收集日志
              },
            ),
            onError: (Object obj, StackTrace stack) {
              var details = makeDetails(obj, stack);
              reportErrorAndLog(details);
            },
          );
        }
        
   7. 组件
   
      7.1 Widget 与 Element
      
        1. Widget是Element的配置数据，Widget树实际上是一个配置树，而真正的UI渲染树是由Element构成；不过，由于Element是通过Widget生成的，所以它们之间有对应关系，在大多数场景，我们可以宽泛地认为Widget树就是指UI控件树或UI渲染树
        
        2. 一个Widget对象可以对应多个Element对象
        
        3. 声明Widget类型时，通常使用命名参数。对应必须的参数使用@require标注
        
        4. 继承Widget时，构造函数中的第一个参数通常是 key 。
        
        5. 如果Widget中需要嵌套其他Wigdet，通常将child或者children写在属性列表的最后
        
        6. Widget的属性应尽可能声明为final，防止意外修改。
        
        7. 在继承StatefulWidget重写其方法时，对于包含@mustCallSuper标注的父类方法，都要在子类方法中先调用父类方法
         
      7.2 StatelessWidget 与 StatelessElement 
      
        1. StatelessWidget 与 StatelessElement 对应。StatelessWidget 作为 StatelessElement的配置数据。
        
        2. StatelessWidget用户不需要维护状态的场景，通常在build方法内签入其他widget构建UI。     
        
        
      7.3 StatefulWidget & StatefulElement & State
        
        1. StatefulWidget与StatefulElement对应，StatefulWidget作为StatefulElement的配置数据。
        
        2. StatefulWidget 中需要 实现CreateState()方法。
        
        3. CreateState()方法可能会被多次调用。例如，当Widget被插入到Widget树中的多个位置时，在每个位置都会调用CreateState()方法。并且，每个
          位置的State是相互独立的。
          
        4. State中包含Widget 和 Context 两个属性。
        
          4.1 widget是State对应的StatefulWidget
          
          4.2 context表示构建widget的上下文，它是操作widget在树中位置的一个句柄，它包含了一些查找、遍历当前Widget树的一些方法
        
        
        5. State声明周期
        
          initState() 当Widget第一次插入到Widget树时会被调用，对于每一个State对象，Flutter framework只会调用一次该回调，所以，通常在该回调中做一些一次性的操作，如状态初始化、订阅子树的事件通知等
          
          didChangeDependencies() 当State对象的依赖发生变化时会被调用。
          
          build()
          
            1. 在调用initState()之后。
            2. 在调用didUpdateWidget()之后。
            3. 在调用setState()之后。
            4. 在调用didChangeDependencies()之后。
            5. 在State对象从树中一个位置移除后（会调用deactivate）又重新插入到树的其它位置之后。    
          
          reassemble() 此回调是专门为了开发调试而提供的，在热重载(hot reload)时会被调用，此回调在Release模式下永远不会被调用        
           
          didUpdateWidget() 在widget重新构建时，Flutter framework会调用Widget.canUpdate来检测Widget树中同一位置的新旧节点，然后决定是否需要更新，如果Widget.canUpdate返回true则会调用此回调。
          
          deactivate() 当State对象从树中被移除时，会调用此回调
          
          dispose() 当State对象从树中被永久移除时调用；通常在此回调中释放资源。
         
      7.4 状态管理
        
        1. 在组件内进行状态管理。将组件继承statefulWidget，创建自己的State，在需要的时候调用SetState()方法即可
        
        2. 在父组件中进行状态。
           
           2.1 父组件继承自StatefulWidget，子组件继承自StatelessWidget。
           
           2.2 创建子组件时，父组件将状态信息传递子组件中。
           
           2.3 创建子组件时，父组件将更新状态的方法传递到子组件中。子组件在需要时，调用父组件的方法更新状态。
        
        3. 混合管理(父子组件中各管理一部分状态)
        
        4. 全局状态管理，用于跨组件或者跨路由的状态管理。例如，在设置页面中改变了语言，app中所有的页面都应该变换语言
        
           4.1 注册一个全局事件总线，按需要订阅事件，当事件发生时，更新状态。
           
           4.2 使用状态管理的包
      
